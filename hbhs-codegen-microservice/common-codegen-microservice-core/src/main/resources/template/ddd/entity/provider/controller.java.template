package ${packageName}.endpoint;

import ${packageName}.api.endpoint.${entityClassName}Endpoint;
import ${packageName}.api.proxy.${entityClassName}Proxy;
import ${packageName}.domain.request.param.${entityClassName}CreateParam;
import ${packageName}.domain.request.param.${entityClassName}QueryParam;
import ${packageName}.domain.request.param.${entityClassName}UpdateParam;
import ${packageName}.domain.response.info.${entityClassName}Info;
import ${packageName}.service.I${entityClassName}Service;
import com.hbhs.common.domain.model.request.GenericRequest;
import com.hbhs.common.domain.model.request.IdRequest;
import com.hbhs.common.domain.model.request.QueryRequest;
import com.hbhs.common.domain.model.response.TPageResult;
import com.hbhs.common.domain.model.response.TResultBuilder;
import com.hbhs.common.domain.model.response.TSingleResult;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Service(value = ${entityClassName}Endpoint.API_NAME)
@Slf4j
public class ${entityClassName}Controller implements ${entityClassName}Endpoint {
    @Autowired
    private I${entityClassName}Service ${entityName}Service;
    @Override
    public TSingleResult<${entityClassName}Info> create(GenericRequest<${entityClassName}CreateParam> request) {
        return TResultBuilder.succSingle(${entityName}Service.create${entityClassName}(request.getParam()));
    }

    @Override
    public TSingleResult<Boolean> udpate(GenericRequest<${entityClassName}UpdateParam> request) {
        return TResultBuilder.succSingle(${entityName}Service.update${entityClassName}(request.getParam()));
    }

    @Override
    public TSingleResult<${entityClassName}Info> findById(IdRequest request) {
        return TResultBuilder.succSingle(${entityName}Service.find${entityClassName}ById(request.getId()));
    }

    @Override
    public TSingleResult<Boolean> deleteById(IdRequest request) {
        return TResultBuilder.succSingle(${entityName}Service.delete${entityClassName}(request.getId()));
    }

    @Override
    public TPageResult<${entityClassName}Info> query${entityClassName}(QueryRequest<${entityClassName}QueryParam> request) {
        return ${entityName}Service.query${entityClassName}(request.getParam(), request.getPagination());
    }
}
